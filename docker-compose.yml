services:
  postgres_db:
    image: postgres:latest
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGPORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    networks:
      - cx-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_EXPOSED_PORT: ${PGADMIN_EXPOSED_PORT}
    ports:
      - '${PGADMIN_EXPOSED_PORT}:80'
    depends_on:
      - postgres_db
    networks:
      - cx-network

  cx-api:
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
      - '${HTTP_PORT}:${HTTP_PORT}'
    env_file:
      - .env
    depends_on:
      - postgres_db
    networks:
      - cx-network

  auth:
    build:
      context: .
      dockerfile: Dockerfile.auth
    ports:
      - '${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}'
    env_file:
      - .env
    depends_on:
      - postgres_db
    networks:
      - cx-network

  zookeeper:
    container_name: zookeeper
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    env_file:
      - .env
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka-network

  kafka:
    container_name: kafka
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    env_file:
      - .env
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    networks:
      - kafka-network
    depends_on:
      - zookeeper

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - '8085:8080'
    env_file:
      - .env
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - kafka-network

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local

networks:
  cx-network:
    driver: bridge
    # external: true
  kafka-network:
    driver: bridge

  # Add more services as needed
